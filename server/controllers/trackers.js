// Generated by CoffeeScript 1.6.3
var Tracker, TrackerAmount, normalizeResults;

Tracker = require('../models/tracker');

TrackerAmount = require('../models/trackeramount');

normalizeResults = require('../lib/normalizer');

module.exports = {
  loadTracker: function(req, res, next, trackerId) {
    return Tracker.request('all', {
      key: trackerId
    }, function(err, trackers) {
      if (err) {
        return next(err);
      } else if (trackers.length === 0) {
        console.log('Tracker not found');
        return res.send({
          error: 'not found'
        }, 404);
      } else {
        req.tracker = trackers[0];
        return next();
      }
    });
  },
  all: function(req, res, next) {
    return Tracker.all(function(err, trackers) {
      if (err) {
        return next(err);
      } else {
        return res.send(trackers);
      }
    });
  },
  create: function(req, res, next) {
    return Tracker.create(req.body, function(err, tracker) {
      if (err) {
        return next(err);
      } else {
        return res.send(tracker);
      }
    });
  },
  update: function(req, res, next) {
    return res.send({
      error: 'not implemented yet'
    }, 500);
  },
  today: function(req, res, next) {
    return req.tracker.loadTodayAmount(function(err, trackerAmount) {
      if (err) {
        return next(err);
      } else if (trackerAmount != null) {
        return res.send(trackerAmount);
      } else {
        return res.send({});
      }
    });
  },
  updateTodayValue: function(req, res, next) {
    return req.tracker.loadTodayAmount(function(err, trackerAmount) {
      var data;
      if (err) {
        return next(err);
      } else if (trackerAmount != null) {
        trackerAmount.amount = req.body.amount;
        return trackerAmount.save(function(err) {
          if (err) {
            return next(err);
          } else {
            return res.send(trackerAmount);
          }
        });
      } else {
        data = {
          amount: req.body.amount,
          date: new Date,
          tracker: req.tracker.id
        };
        return TrackerAmount.create(data, function(err, trackerAmount) {
          if (err) {
            return next(err);
          } else {
            return res.send(trackerAmount);
          }
        });
      }
    });
  },
  amounts: function(req, res, next) {
    var id, params;
    id = req.tracker.id;
    params = {
      startkey: [id],
      endkey: [id + "0"],
      descending: false
    };
    return TrackerAmount.rawRequest('nbByDay', params, function(err, rows) {
      var data, date, dateEpoch, results, row, tmpRows, value, _i, _len;
      if (err) {
        return next(err);
      } else {
        results = [];
        tmpRows = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          tmpRows.push({
            key: row['key'][1],
            value: row['value']
          });
        }
        data = normalizeResults(tmpRows);
        for (date in data) {
          value = data[date];
          dateEpoch = new Date(date).getTime() / 1000;
          results.push({
            x: dateEpoch,
            y: value
          });
        }
        return res.send(results, 200);
      }
    });
  },
  destroy: function(req, res, next) {
    return TrackerAmount.destroyAll(req.tracker, function(err) {
      if (err) {
        return next(err);
      } else {
        return req.tracker.destroy(function(err) {
          if (err) {
            return next(err);
          } else {
            return res.send({
              success: true
            });
          }
        });
      }
    });
  }
};
